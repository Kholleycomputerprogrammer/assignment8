A hash table is the right structure for fast lookups due to the way they are designed. Hash tables are designed to provide constant time average performance for things like insertions, deletions, and lookups. Unlike lists, a hash table can use a hash function to map a key directly to an index in an underlying array. The ability of jumping directly to the index makes hash tables an ideal choice when it comes to speed and scalability to your code. 

Sometimes a hash table will have something called a “collision”. This happens because two different keys hash to the same index. To handle this I implemented separate chaining. To do this I used a linked list. Each index in the array points to the head of a linked list of nodes. If multiple contacts happen to hash to the same index they would be linked together in the sequence. What happens is the algorithm checks if a node with the same key exists. If a node does have the same key then its value is updated. This method makes sure even if a collision happens in the hash table, it will not break the whole system.

An engineer would rather choose a hash table over a list or tree when the primary requirement is to be fast, and if the engineer needs fast direct access to the data at hand. A hash has faster time compared to a tree. But trees could be preferable if ordered tr
